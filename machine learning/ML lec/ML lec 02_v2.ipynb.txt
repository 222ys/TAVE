{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### Linear Regression"
      ],
      "metadata": {
        "id": "A9N527GPBnTg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a_Ujh2Z0BeDO",
        "outputId": "3db60e25-8481-45ed-de56-dcb525265244"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 tf.Tensor(4.220515, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([0.35104346], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.4501975], dtype=float32)>\n",
            "100 tf.Tensor(0.0016966676, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0477197], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.10849332], dtype=float32)>\n",
            "200 tf.Tensor(0.0010484419, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0375165], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.08528393], dtype=float32)>\n",
            "300 tf.Tensor(0.00064787024, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0294913], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.06704086], dtype=float32)>\n",
            "400 tf.Tensor(0.00040034717, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0231829], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.05270019], dtype=float32)>\n",
            "500 tf.Tensor(0.00024738628, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0182238], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.04142699], dtype=float32)>\n",
            "600 tf.Tensor(0.00015286854, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0143255], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.03256523], dtype=float32)>\n",
            "700 tf.Tensor(9.446423e-05, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0112612], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.02559931], dtype=float32)>\n",
            "800 tf.Tensor(5.8374233e-05, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0088524], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.02012348], dtype=float32)>\n",
            "900 tf.Tensor(3.6072273e-05, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0069588], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.01581896], dtype=float32)>\n",
            "1000 tf.Tensor(2.2289983e-05, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0054703], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.01243524], dtype=float32)>\n",
            "1100 tf.Tensor(1.3774433e-05, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0043002], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00977536], dtype=float32)>\n",
            "1200 tf.Tensor(8.512165e-06, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0033804], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00768437], dtype=float32)>\n",
            "1300 tf.Tensor(5.2602136e-06, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0026574], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00604081], dtype=float32)>\n",
            "1400 tf.Tensor(3.2509233e-06, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0020891], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00474892], dtype=float32)>\n",
            "1500 tf.Tensor(2.00897e-06, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0016425], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00373325], dtype=float32)>\n",
            "1600 tf.Tensor(1.2417834e-06, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0012913], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00293501], dtype=float32)>\n",
            "1700 tf.Tensor(7.676331e-07, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0010151], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00230762], dtype=float32)>\n",
            "1800 tf.Tensor(4.7465338e-07, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0007985], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00181453], dtype=float32)>\n",
            "1900 tf.Tensor(2.935258e-07, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.0006278], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00142693], dtype=float32)>\n",
            "2000 tf.Tensor(1.8159979e-07, shape=(), dtype=float32) <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([1.000494], dtype=float32)> <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.00112235], dtype=float32)>\n"
          ]
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "# train 데이터 생성\n",
        "X_train = [1, 2, 3]\n",
        "y_train = [1, 2, 3]\n",
        "\n",
        "# 학습 파라미터 설정\n",
        "learning_rate = 0.01\n",
        "traning_steps = 2000\n",
        "\n",
        "# Weight, bias 설정\n",
        "W = tf.Variable(tf.random.normal(shape=[1]))\n",
        "b = tf.Variable(tf.random.normal(shape=[1]))\n",
        "\n",
        "# 최적화를 위한 Stochastic Gradient Descent(SGD) 옵티마이저 적용\n",
        "optimizer = tf.optimizers.SGD(learning_rate)\n",
        "\n",
        "for step in range(traning_steps + 1):\n",
        "  # 텐서플로우는 자동 미분(주어진 입력 변수에 대한 연산의 gradient를 계산하는 것)을 위한 tf.GradientTape 함수 사용\n",
        "  with tf.GradientTape() as g:\n",
        "    # Hypothesis, Cost Function 설정\n",
        "    hypothesis = X_train * W + b\n",
        "    cost = tf.reduce_mean(tf.square(hypothesis - y_train))\n",
        "\n",
        "    # gradients 계산\n",
        "    gradients = g.gradient(cost, [W, b])\n",
        "    \n",
        "    # gradients에 따라 Weight(W)와 bias(b) 업데이트\n",
        "    optimizer.apply_gradients(zip(gradients, [W, b]))\n",
        "    \n",
        "    if step % 100 == 0:\n",
        "      print(step, cost, W, b)"
      ]
    }
  ]
}